* Notes
** Installing Tk
cpan Tk
** Special purpose registers
Should they be directly addressable?
Does the VM really need separate methods for them?
** BIOS design
The DCPU-16 isn't really set up to support operating systems. in particular, there's no notion of a "privileged mode" for the processor. Any concept of an OS basically starts with the interrupt handler, and any user program can override it, so there's no way for an OS to make any guarantees about what's going to happen. It would however be possible for a considerate user program to store the original IA in memory, install its own handler for dealing w/ special hardware, which would then call the original handler. 

If I freeze the hardware to keyboard, monitor, and clock, then the outlines of a BIOS form:
1) Disable keyboard monitor interrupts.
2) Set the clock to tick 30 times a second.
3) Every time the clock ticks, poll the keyboard for input, copy it to a memory buffer, and paint the monitor.

The emulator would start by setting PC to the memory address for the BIOS. The BIOS would install its interrupt handler, then start executing code from a fixed point in memory (likely 0x0000). User code would need to avoid using interrupts (or else call the BIOS interrupt handler as described above), and avoid writing to the region of memory reserved by the BIOS. It probably makes sense for the BIOS to reserve the high end of memory, meaning there's a maximum length to the stack, then video RAM (by default, the default font and palette of the monitor are used), then the BIOS interrupt handler. 

Basically, the BIOS is implemented in terms of interrupts, and exposes the same memory-mapped IO model we had early to user code. To user code, the interface is simple: your program is loaded at 0x0000, the keyboard buffer is at Xy, the video RAM starts at Y, don't write to memory above Z or the BIOS will break.

User code can opt out of the BIOS by setting IA to 0, but it is then responsible for managing all hardware devices.  This could see this being useful for games.
* Icebox
** TODO look at limiting cycle rate to 100 KHz, per spec
** TODO Compare code w/ other assemblers/emulators
** TODO test assembler/emulator interop with other distributions
** TODO assembler should detect syntax error for "negative hexadecimal" numbers, e.g. -0x04
** TODO what about a way to dynamically assemble & load new instructions? A REPL for DCPU-16
** TODO config file to define attached hardware?
** TODO reset button?
* To Do
** DONE Assembler should output actual binary
** DONE Create a disassembler
** DONE emulator needs to be able read binary output from assembler
** DONE refactor disassembler and emulator to share disassembly code
** DONE assembler and disassembler needs to support multi-word instructions
First word always has the op code and two operands, but either of those operand might reference the "next word".
For each reference to "next word", an additional word is appended to the instruction. Since there are two operands, each of which may reference "next word" once, this means that the maximum length of an instruction is three words.

When assembling an instruction, the current idea is to replace literals (which may themselves be up to a full word) with "next word" regardless. A future optimization would be to "inline" them if they are less than six bits, the size of an operand (this would be known as a "short form" value).

The correct way to implement this in the assembler seems to be to check if an operand is a value, in which case just encode the value, or if it is a literal, in which case encode "next word" and append the literal as an additional word.

For the disassembler, it seems that every time "next word" is encountered, read the next word and use it in place of "next word".
** DONE emulator needs to support memory
do most chips have dedicated storage for the stack? or is it usually just in RAM?

am I jumping up too high a level here? resolve-operand is basically disassembling values, which get pass to read_value...seems like read_value should be able to act on the values directly?

although resolve_operand does play the important part of inlining "next word"

need read_value and write value, which accept resolved operands

basically what is happening here is that I am disassembling the object code and then writing an interpreter for assembly language

I feel like this is not what I'm supposed to be doing...but I also feel like this will work
** DONE create VM.pm
need strong abstraction around the machine? A VM module that exposes these methods:
read_register
write_register
read_memory
write_memory
** DONE need write_value
** DONE Add support to the emulator for operations besides SET
** DONE implement stack
** DONE need to actually load program into memory (VM::load_program ?)
** DONE implement program counter
** DONE implement flow control instructions (IFE, IFN, IFG, IFB)
need to skip next instruction, not just next word
** DONE assembler needs to support labels
should replace the label with the memory address of the target
** DONE implement JSR instruction
** DONE implement short-form literals
** DONE add support decimal and short form hex literals to assembler
** DONE pad monitor
** DONE place buttons
** DONE layout and bind registers
** DONE disassembler should pretty-print expressions
** DONE play/stop
** TODO emulator needs to validate that the input is an object code file
** TODO common namespace for modules
** TODO rename DCPU module to Util, and VM to DCPU
** TODO make sure that I'm compliant w/ the spec on operand evaluation order
** Assembler
*** DONE assembler needs to support labels on their own lines
*** TODO assembler should accept -v flag
** Testing
*** TODO need a proper test harness
*** TODO test excess behavior for operators that set excess
*** TODO test that excess register can be read by instructions

*** TODO test interrupt queue
*** TODO fix test_set.asm
*** TODO verify wrapping behavior of write_register
** GUI 
*** TODO fix bug: some kind of edge effect with canvas
*** TODO highlight PC and SP
*** TODO more flexible display for memory
* Scratch

Next:
- Flesh out hardware devices:
  - finish monitor emulator (default font, default palette, blink)
  - implement clock emulator
- Implement BIOS to simplify writing programs that use the hardware and keyboard.
